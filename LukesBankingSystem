using System;
using System.Collections;

//The IAccount interface specifies what methods we want our account class to contain
public interface IAccount
{
    void PayInFunds(decimal amount);
    bool WithdrawFunds(decimal amount);
    decimal GetBalance();
    string RudeLetterString();
    //decimal RipoffFee();
}

public interface IBank
{
    IAccount FindAccount(string name);
    bool StoreAccount(IAccount account);
}

//This enumerator will hold the current state type of an account
public enum AccountState
{
    New,
    Active,
    UnderAudit,
    Frozen,
    Closed
};

/*Our abstract account class creates some methods used by all account class types, and defines some
abstract methods that the account classes will implement differently*/
public abstract class Account : IAccount
{
    public AccountState State;
    public string name;
    public string address;
    public int accountNumber;
    protected decimal balance = 0;
    public int overdraft;


    //An abstract method will not be provided in this class, but will be provided in the child class
    public abstract string RudeLetterString();
   
    public virtual bool WithdrawFunds(decimal amount)
    {
        if (balance < amount)
        {
            return false;
        }
        balance = balance - amount;
        return true;
    }
    public decimal GetBalance()
    {
        return balance;
    }
    public void PayInFunds(decimal amount)
    {
        balance = balance + amount;
    }

    /*public bool StoreAccount(IAccount account)
    {
        int position = 0;
        for (position = 0; position < ArrayBank.Length; position++)
        {
            if (ArrayBank[position] == null)
            {
                ArrayBank[position] = account;
                return true;
            }
        }
        return false;
    }*/

    
}


public class CustomerAccount : Account
{
    public override string RudeLetterString()
    {
        return "You are overdrawn";
    }


}

public class BabyAccount : Account
{

    public override bool WithdrawFunds(decimal amount)
    {
        if (amount > 10)
        {
            return false;
        }
        return base.WithdrawFunds(amount);
    }
    public override string RudeLetterString()
    {
        return "Tell daddy you are overdrawn";
    }

}


class BankProgram
    {
        public static void Main()
        {
        /*Max customers in bank in constant form so it can be changed to alter
        the amount of customers held easily*/
        const int MAX_CUST = 100;

        ArrayBank ourBank = new ArrayBank(100);


        //This creates a unique identifier that will be our accounts unique ID
        Guid g = Guid.NewGuid();
        Console.WriteLine(g);




       
    }
}

