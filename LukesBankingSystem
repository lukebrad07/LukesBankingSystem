using System;

//This enumerator will hold the current state type of an account
enum AccountState
{
    New,
    Active,
    UnderAudit,
    Frozen,
    Closed
};

class BankingSystem
{
    //This structure will be the template for each account
    struct Account
    {
        public AccountState State;
        public string Name;
        public string Address;
        public int AccountNumber;
        public decimal Balance;
        public int Overdraft;
    };

    //This constant is the max amount of customers the banking system can hold
    const int MAX_CUST = 50;

    //This method allows an account's name, address, and balance to be printed
    static void PrintAccount(Account a)
    {
        Console.WriteLine("Name:" + a.Name);
        Console.WriteLine("Address:" + a.Address);
        Console.WriteLine("Balance:" + a.Balance);
    }

    static public decimal balance = 0;
    static public bool WithdrawFunds (decimal amount)
    {
        if (balance < amount)
        {
            return false;
        }
        balance = balance - amount;
        return true;
    }
    public void PayInFunds(decimal amount)
    {
        balance = balance + amount;
    }
    public decimal GetBalance()
    {
        return balance;
    }



    static void Main(string[] args)
    {
        Console.WriteLine("yo");

        //This declaration sets up an array called bank holding all the customers in the system
        Account[] Bank = new Account[MAX_CUST];

        /*These arrays hold the state, name, address, account numbers, balances, and overdraft fee amounts
        of the customers in the banking system */
        AccountState[] states = new AccountState[MAX_CUST];
        String [] names = new string[MAX_CUST];
        String [] addresses = new string[MAX_CUST];
        int [] accountNos = new int[MAX_CUST];
        decimal [] balances = new decimal[MAX_CUST];
        int[] overdraft = new int[MAX_CUST];


        //This creates an account for the banking system to hold
        Account LukesAccount;
        LukesAccount.State = AccountState.Active;
        LukesAccount.Balance = 0;
        LukesAccount.Name = "Luke";
        LukesAccount.Address = "3070 Burning Tree, Garland TX";
        LukesAccount.AccountNumber = 954345;
        LukesAccount.Overdraft = 0;

        //This assigns the created account structure into the first element of the bank array
        Bank[0] = LukesAccount;

        PrintAccount(LukesAccount);

        if (WithdrawFunds(LukesAccount.Balance))
        {
            Console.WriteLine("Cash Withdrawn");
        }
        else
        {
            Console.WriteLine("Insufficient Funds");
        }

    }
}

